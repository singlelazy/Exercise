正则：也叫做规则，让计算机能够读懂人类的规则
正则都是操作字符串的

写法：
var re =/a/
var re=new RegExp();

默认行为：
	不忽略大小写     i忽略大小写
	匹配成功就结束	g全局匹配
	当正则需要传参时一定要用全称的写法

量词：匹配不确定的位数
 + ： 	一次或任意次
{n,}:  	至少n次
 * : 	任意次
 ? :	零次或一次
{n}: 	正好n次


匹配子项:()或者是分组操作

字符类：[] 一组相似的元素
	- 任意字符[abc]
	- 范围[a-z],[0-9]
	- 排除[^]
^   : 正则最开始的位置，
$   : 正则的最后位置

转义字符：
\n 换行		\d 数字						.   任意字符
\r 制表		\D 非数字					\.  真正的.
\t 回车		\w 字符(字母，数字，下划线_)	\b  独立的部分 (起始,结束,空格)
\s 空格		\W 非字符					\B  非独立的部分
\S 非空格	\1 重复子项

| 或
正则表达式的常用方法

1.test 字符串判断
	- 返回真假
	- 正则.test(字符串)
	- 例子：是否有不是数字的字符

2.search 字符串搜索
	- 返回出现的位置(成功:位置，失败：-1)
	- 字符串.search(正则)
	- 忽略大小写: i-ignore

3.match 获取匹配的项目
	- 返回数组
	- 量词：+
	- 全局匹配：g-global
	- 在不加g的情况下可以获取子项

4.replace 替换所有匹配
	- 返回替换后的字符串
	- 字符串.replace(正则，"字符串"|| 回调函数(整体，第一个子项，第二个子项)
	- 例子：敏感词过滤


高级表单校验
	-匹配中文 [\u4e00-\u9fa5]
	-行首行尾空格 ^\s*|\s*$
	-Email ^\w+@[a-z0-9]+(\.[a-z]+){1,3}$
	-网址 [a-zA-Z]+://[^\s]*
	-QQ号 [1-9][0-9]{4,9}
	-邮编号码 [1-9]\d{5}
	-身份证 [1-9]\d{14}|[1-9]\d{17}|[1-9]\d{16}x