1.面向对象变成(OOP)的特点
	- 抽象： 抓住核心问题
	- 封装： 只能通过对象来访问方法
	- 继承： 从已有对象上继承新的对象
	- 多态： 多对象的不同形态
2.面向对象的组成
	- 方法(行为、操作)——函数: 过程、动态的
	- 属性——变量: 状态、静态的
3.工厂方式:
	面向对象中的封装函数
	改成与系统对象类似写法
		- 首字母大写
		- New关键字提取
		- This指向为新创建的对象,函数的返回值直接就是this(隐式返回)
	构造函数
		- 用来创建对象的函数,叫做构造函数
	存在的问题
		- 对象的引用
		- 内存浪费
4.对象的引用
	基本类型赋值：赋值的时候只是值的复制
	对象类型赋值：赋值不仅是值的复制,而且也是引用的传递
	基本类型比较：值相同就可以
	对象类型比较：值和引用都相同
5.原型(prototype)
	只有函数才有原型属性
	去改写对象下面公用的方法或者属性，让公用的方法或者属性在内存中存在一份(提高性能)
	通过原型改写工厂方式
		- 原则：相同的属性和方法可以加载到原型上
		- 混合的编程模式
6.总结面向对象写法
	- 构造函数加属性,原型加方法
	function 构造函数(){
		this.属性
	}
	构造函数.prototype.方法=function(){}

	var 对象1=new 构造函数();
	对象1.方法

7.改写原则：
	-先写出普通的写法，然后改成面向对象的写法
		普通写法变形
			尽量不要从出现函数套函数
			可以有全局变量
			把onload中不是赋值的语句放在单独函数中
		改成面向对象
			全局变量就是属性
			函数就是方法
			onload中创建对象
			改this指向问题	
8.包装对象：基本类型都有自己对应的包装对象：String Boolean Number
9.原型链:
	- 实例对象与原型之间的连接,叫做原型链
	- __proto__(隐式连接)
	- Object对象类型是原型链的最外层
10.面向对象的一些属性和方法
	hasOwnProperty():看是不是对象自身下的属性
	construtor: 查看对象的构造函数
		- 每个原型都会自动添加construtor属性
		- For in有些属性是查不到的
		- 避免修改construtor属性
	instanceof:运算符
		- 对象和构造函数在原型链上是否有关系
	toString(): object上的方法
		把对象转成字符串
11.继承
	子类不影响父类,子类可以继承父类的一些功能(代码复用)
	拷贝继承(通用型 有无new都可以)
		- for in
		- JSON.parse(JSON.stringify(obj)) (对象和数组)
	类式继承(new构造函数)
		- 利用构造函数(类)继承的方式
	原型继承(无new的对象)
		- 借助原型来实现对象继承对象
12.组件开发
	对面向对象的深入应用（UI组件,功能组件）
	将配置参数、方法、事件三者分离
13.自定义事件
	主要和函数有关，能让函数具备事件的某些特性
	有利于多人协作开发代码
	Jquery中
		on,blind绑定事件
		trigger触发事件

