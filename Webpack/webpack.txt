1.基本配置
	初始化
		npm init -y
	安装依赖
		npm i -D webpack
		npm i -D webpack-cli(webpack4.0新增)
	创建命令
		在package.json里script下
		"dev":"webpack" 	//默认通过查找webpack.config.js的文件进行打包 'webpack --config 自己取得配置文件名'
	webpack.config.js
		const path=require('path')
		
		module.exports={
			entry:'', 	//入口文件
			output:{ 	//输出
				path:path.resolve(_dirname,'dist')  //_dirname表示当前文件目录的绝对路径,'dist'表示打包后的位置
				filename:'main.js'  				//打包后的文件名
			},
			mode:'development'('production')		//打包模式：development还是production(webpack4.0新增的)
		}
2.插件
	1.html-webpack-plugin 创建html文件
	配置
		const HtmlWebpackPlugin=require('html-webpack-plugin')
		在webpack.config.js里的module.exports里加个字段
		plugins:[
			new  HtmlWebpackPlugin({
				filename:'',打包后的html文件名
				template:''，以什么html文件为模板进行打包
			})
		]
3.loader webpack用来预处理模块的，在一个模块被引入之前,会预先使用loader处理模块的内容(处理顺序，从右往左)
	配置
		在webpack.config.js里的module.exports里加个字段
		依赖
			react react-dom babel-loader babel-core babel-preset-react
		module:{
			rules:[{
				test:/\.js$/,				//匹配的文件类型
				use:[{						//选择loader
					loader:'babel-loader',
					options:{	
						presets:['react']  //编译规则
					}
				}]
			}]
		}
4.devserver 使项目可以运行在服务器上(运行时，会先打包)
	依赖
		webpack-dev-server
	配置
		在webpack.config.js里的module.exports里加个字段
		devServer:{    //服务器配置
			open:true,  //自动打开浏览器
			port:9000	//切换端口
		}
5.引入css
	style-loader 插入style
	css-loader 处理CSS文件中出现的URL，会自动帮你引入里面重要的模块
6.引入图片
	file-loader
		1.把你的资源移动到输出目录
		2.返回最终引入资源的URL
	url-loader  会编码成浏览器能识别的base64位图片，减少网络请求，但是图片过大，编码过大
7.引入字体
	font-awesome 字体库
8.CSS模块化
	use:['style-loader',
			{
				loader:'css-loader',
				options:{
					modules:true //模块化开启
				}
			}
		]
	exclude:[  //不包括文件
		path.resolve(_dirname,'node_modules')
	]