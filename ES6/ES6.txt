1.let和const
	let:用来声明一个变量，和var非常相似
		注意事项：
			变量只在命令所在的代码块内有效
			变量在域解析时不会被提升
			不允许在用一作用域下声明已经存在的变量
	const:用来声明一个常量，常量就是不可以变化的量
		注意事项：
			有let的三个特点
			声明的时候必须赋值
			声明的常量存储简单的数据类型的时候是不可改变其值的，如果存储的是对象，那么引用不可以被改变,至于对象里面的数据是如何变化的，没关系
2.变量的解构赋值
	本质上就是一种匹配模式,只要等号两边的模式相同，那么左边的变量就可以被赋予对应的值
		解构赋值主要分三种:
			数组的解构赋值：
			对象的结构赋值：
			基本类型的解构赋值
3.数据结构Set
	集合的基本概念：是由一组无序且唯一的项组成的
	特点：key和value相同，没有重复的value
		创建一个Set:new Set()
		Set类的属性:size
		Set类的方法：
			set.add(value) 添加一个数据，返回Set结构本身,可以链式操作
			set.delete(value) 删除指定数据，返回一个布尔值，表示删除是否成功
			set.has(value) 判断该值是否为set的成员，返回一个布尔值
			set.clear()清楚所有数据，没有返回值
			keys()返回键名的遍历器
			values()返回键值的遍历器
			entries()返回键值对的遍历器
			forEach(function(value,keys,set){})使用回调函数遍历每个成员
4.数据结构Map
	字典类型的数据结构。用来存放不重复的key的hash结构，不同于set,使用的是[键，值]的形式存储数据，但是键不限于字符串，各种类型的值都可以当作键。
		创建一个Map:new Map()
		Map类的属性:size
		Map类的方法:
			map.set(key,value)设置键名key对应的键值为value,然后返回整个Map结构。如果key已经有值，则键值会被更新,可以链式操作
			map.get(key)get方法读取key对应的键值，如果找不到key,返回undefined
			map.delete(value) 删除指定数据，返回一个布尔值，表示删除是否成功
			map.has(value) 判断该值是否为has的成员，返回一个布尔值
			map.clear()清楚所有数据，没有返回值
			keys()返回键名的遍历器
			values()返回键值的遍历器
			entries()返回键值对的遍历器
			forEach(function(value,keys,map){})使用回调函数遍历每个成员
		注意事项：
			只要内存地址不同，视为两个键名
			key的排列顺序按照添加的顺序进行排序
5.Interator
	他是一种接口,为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Interator接口,就可以完成遍历操作，而且这种操作是依次处理该数据结构的所有成员
		Interator遍历器的作用
			为各种数据结构，提供一个统一的，简便的访问接口
			使得数据结构的成员能够按照某种次序排列
			ES6新增了遍历命令for...of循环，Interator接口主要供for...of消费
		Interator的遍历过程
			创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器的本质是一个指针对象
				-第一次调用指针对象的next方法，可以将指针指向数据结构中的第一个成员
				-第二次调用指针对象的next方法，可以将指针指向数据结构中的第二个成员
				-不断调用指针对象的next方法，直到它指向数据结构的结束位置
			每一次调用next方法，都会返回一个包含value和done两个属性的对象，其中value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束
		凡是具有Symbol.interator属性的数据结构都具有Interator接口
		具备interator接口的数据结构都可以进行以下操作
			解构赋值
			扩展运算符(...)
6.class的语法
	JS语言的传统方法是通过构造函数，定义并生成新对象，是一种基于原型的面向对象系统。在ES6中新增了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象
	
